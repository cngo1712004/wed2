/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
/**
 * @module ai/aiassistant
 * @publicApi
 */
import { type Locale } from 'ckeditor5/src/utils';
import { Plugin, type Editor } from 'ckeditor5/src/core';
import AIAssistantUI from './aiassistantui';
import AIAssistantEditing from './aiassistantediting';
import AIConnector from './aiconnector';
/**
 * A function that returns the list of default AI commands definitions in the given localization context.
 */
export declare const getDefaultCommands: (locale: Locale) => Array<GroupDefinition>;
/**
 * AI assistant plugin that allows you to use external AI models to generate content or improve existing content.
 */
export default class AIAssistant extends Plugin {
    /**
     * @inheritDoc
     */
    static get requires(): readonly [typeof AIAssistantUI, typeof AIAssistantEditing, typeof AIConnector];
    /**
     * @inheritDoc
     */
    static get pluginName(): "AIAssistant";
    /**
     * @inheritDoc
     */
    constructor(editor: Editor);
    /**
     * @inheritDoc
     */
    init(): void;
    /**
     * @inheritDoc
     */
    destroy(): void;
}
/**
 * The configuration of the AI assistant feature.
 *
 * ```ts
 * ClassicEditor
 * 	.create( editorElement, {
 * 		aiAssistant: ... // AI assistant options.
 * 	} )
 * 	.then( ... )
 * 	.catch( ... );
 * ```
 *
 * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.
 */
export interface AIAssistantConfig {
    /**
     * The URL to which the API request will be sent.
     *
     * Defaults to `'https://api.openai.com/v1/chat/completions'`.
     */
    apiUrl?: string;
    /**
     * A key used to authorize the request to the AI service.
     *
     * If you are connecting directly to the OpenAI API, use your OpenAI API key as `authKey`.
     *
     * **Important: use your API key ONLY in a development environment or for testing purposes!**
     * In the production environment, {@glink features/ai-assistant#using-proxy-endpoint pass your request through a proxy}.
     *
     * If you are using a proxy service to send requests to the AI service, `authKey` can be used to implement authorization for your
     * requests.
     *
     * If the key is provided, it is added to the `Authorization` header of the request call, using the bearer scheme:
     *
     * ```
     * Authorization: Bearer <authKey>
     * ```
     *
     * If the provided value is a `string`, it is simply used as provided.
     *
     * If the provided value is a function, it should be a function that returns a `Promise` which resolves with the authorization token.
     * This way, you can perform an authorization request to your application and receive the authorization token (and also implement
     * any custom logic that you need). The authorization token is then used to make the actual call to the AI service.
     *
     * ```js
     * {
     * 	aiAssistant: {
     * 		authKey: async () => {
     * 			return await fetch( 'https://example.com/jwt-endpoint' );
     * 		}
     * 		// ...
     * 	}
     * }
     * ```
     *
     * If the authorization request fails, the promise should be rejected. In this case, the feature will display an error notification.
     */
    authKey?: string | (() => Promise<string>);
    /**
     * A list of all AI commands groups definitions to be displayed in the `'aiCommands'` UI dropdown.
     *
     * Setting this property will overwrite the default list of predefined commands.
     *
     * The default configuration is as follows:
     *
     * ```json
     * {
     * 	groupId: 'editOrReview',
     * 	groupLabel: 'Edit or review',
     * 	commands: [
     * 		{
     * 			id: 'improveWriting',
     * 			label: 'Improve writing',
     * 			prompt: 'Rewrite this content with no spelling mistakes, proper grammar, ' +
     * 				'and with more descriptive language, using best writing practices without losing the original meaning.'
     * 		},
     * 		{
     * 			id: 'makeShorter',
     * 			label: 'Make shorter',
     * 			prompt: 'Remove any repetitive, redundant, or non-essential writing in this content ' +
     * 				'without changing the meaning or losing any key information.'
     * 		},
     * 		{
     * 			id: 'makeLonger',
     * 			label: 'Make longer',
     * 			prompt: 'Expand upon this content with descriptive language and more detailed explanations, ' +
     * 				'to make the writing easier to understand and increase the length of the content.'
     * 		},
     * 		{
     * 			id: 'simplifyLanguage',
     * 			label: 'Simplify language',
     * 			prompt: 'Rewrite this content with simplified language ' +
     * 				'and reduce the complexity of the writing, so that the content is easier to understand.'
     * 		}
     * 	]
     * },
     * {
     * 	groupId: 'generate',
     * 	groupLabel: 'Generate from selection',
     * 	commands: [
     * 		{
     * 			id: 'summarize',
     * 			label: 'Summarize',
     * 			prompt: 'Provide the key points and concepts in this content in a succinct summary.'
     * 		},
     * 		{
     * 			id: 'continue',
     * 			label: 'Continue',
     * 			prompt: 'Continue this text.'
     * 		}
     * 	]
     * },
     * {
     * 	groupId: 'changeTone',
     * 	groupLabel: 'Change tone',
     * 	commands: [
     * 		{
     * 			id: 'professional',
     * 			label: 'Professional',
     * 			prompt: 'Rewrite this content using polished, formal, and respectful language ' +
     * 				'to convey professional expertise and competence.'
     * 		},
     * 		{
     * 			id: 'casual',
     * 			label: 'Casual',
     * 			prompt: 'Rewrite this content with casual, informal language to convey a casual conversation with a real person.'
     * 		},
     * 		{
     * 			id: 'direct',
     * 			label: 'Direct',
     * 			prompt: 'Rewrite this content with direct language using only the essential information.'
     * 		},
     * 		{
     * 			id: 'confident',
     * 			label: 'Confident',
     * 			prompt: 'Rewrite this content using compelling, optimistic language to convey confidence in the writing.'
     * 		},
     * 		{
     * 			id: 'friendly',
     * 			label: 'Friendly',
     * 			prompt: 'Rewrite this content using friendly, comforting language, to convey understanding and empathy.'
     * 		}
     * 	]
     * },
     * {
     * 	groupId: 'changeStyle',
     * 	groupLabel: 'Change style',
     * 	commands: [
     * 		{
     * 			id: 'business',
     * 			label: 'Business',
     * 			prompt: 'Rewrite this content as a business professional with formal language.'
     * 		},
     * 		{
     * 			id: 'legal',
     * 			label: 'Legal',
     * 			prompt: 'Rewrite this content as a legal professional using valid legal terminology.'
     * 		},
     * 		{
     * 			id: 'journalism',
     * 			label: 'Journalism',
     * 			prompt: 'Rewrite this content as a journalist using engaging language to convey the importance of the information.'
     * 		},
     * 		{
     * 			id: 'poetic',
     * 			label: 'Poetic',
     * 			prompt: 'Rewrite this content as a poem using poetic techniques without losing the original meaning.'
     * 		}
     * 	]
     * },
     * {
     * 	groupId: 'translate',
     * 	groupLabel: 'Translate',
     * 	commands: [
     * 		{
     * 			id: 'translateEnglish',
     * 			label: 'Translate to English',
     * 			prompt: 'Translate to English language.'
     * 		},
     * 		{
     * 			id: 'translateSpanish',
     * 			label: 'Translate to Spanish',
     * 			prompt: 'Translate to Spanish language.'
     * 		},
     * 		{
     * 			id: 'translatePortuguese',
     * 			label: 'Translate to Portuguese',
     * 			prompt: 'Translate to Portuguese language.'
     * 		},
     * 		{
     * 			id: 'translateGerman',
     * 			label: 'Translate to German',
     * 			prompt: 'Translate to German language.'
     * 		},
     * 		{
     * 			id: 'translateFrench',
     * 			label: 'Translate to French',
     * 			prompt: 'Translate to French language.'
     * 		},
     * 		{
     * 			id: 'translateChinese',
     * 			label: 'Translate to Simplified Chinese',
     * 			prompt: 'Translate to Simplified Chinese language.'
     * 		},
     * 		{
     * 			id: 'translateHindi',
     * 			label: 'Translate to Hindi',
     * 			prompt: 'Translate to Hindi language.'
     * 		},
     * 		{
     * 			id: 'translateArabic',
     * 			label: 'Translate to Arabic',
     * 			prompt: 'Translate to Arabic language.'
     * 		}
     * 	]
     * }
     * ```
     */
    commands?: Array<GroupDefinition>;
    /**
     * A list of additional AI commands groups definitions that will extend
     * {@link module:ai/aiassistant~AIAssistantConfig#commands default commands}.
     *
     * You can define new AI commands groups or add new AI commands to existing groups. If you add AI commands to an existing group,
     * you do not need to specify `groupLabel` property.
     *
     * An example configuration:
     *
     * ```json
     * {
     * 	aiAssistant: {
     * 		extraCommandGroups: [
     * 			// Add an AI command to an existing group:
     * 			{
     *				groupId: 'changeTone',
     *				commands: [
     *					{
     *						id: 'sad',
     *						label: 'Sad',
     *						prompt: 'Rewrite this text to make it sound sad and depressing.'
     *					}
     *				]
     * 			},
     * 			// Create a new AI commands group:
     * 			{
     * 				groupId: 'transformations',
     * 				groupLabel: 'Transformations',
     * 				commands: [
     * 					{
     * 						id: 'addEmojis',
     * 						label: 'Add emojis',
     * 						prompt: 'Analyze each sentence of this text. After each sentence add an emoji that summarizes the sentence.'
     * 					},
     * 					// ...
     * 				]
     * 			},
     * 		],
     * 		// ...
     * 	}
     * ```
     */
    extraCommandGroups?: Array<GroupDefinition>;
    /**
     * A list of ids of AI commands to be removed.
     *
     * Learn more about {@link module:ai/aiassistant~CommandDefinition command definition and its id}.
     *
     * An example configuration:
     *
     * ```json
     * {
     * 	aiAssistant: {
     * 		removeCommands: [
     * 			'improveWriting',
     * 			// ...
     * 		],
     * 		// ...
     * 	}
     * ```
     */
    removeCommands?: Array<string>;
    /**
     * Defines a CSS class name added to the AI assistant UI that allows for CSS customization.
     *
     * Setting this property to `false` disables the CSS class.
     *
     * @default 'ck-ai-assistant-ui'
     */
    uiCssClass?: string | false;
    /**
     * An additional CSS class name (or names) added to the AI assistant content area (model response area).
     *
     * Because the content area is usually detached from the flow of the document, this configuration
     * allows for better integration with application's stylesheets and improves the consistency of content
     * styles.
     */
    contentAreaCssClass?: string;
    /**
     * Additional configuration parameters for the AI request. Use it to customize how the AI service generates responses.
     *
     * See [OpenAI API reference](https://platform.openai.com/docs/api-reference/chat/create) to learn more.
     *
     * Defaults to:
     *
     * ```json
     * {
     * 	model: 'gpt-3.5-turbo',
     * 	max_tokens: 2000,
     * 	temperature: 1,
     * 	top_p: 1
     * }
     * ```
     */
    requestParameters?: RequestParameters;
    /**
     * The AI assistant feature will be disabled if the document selection includes any of these elements.
     *
     * Use this property if AI assistant does not work properly with your custom features.
     *
     * Currently, by default, AI assistant is disabled for following model elements:
     *
     * * Media embed (`'media'`) -- does not display in response area,
     * * HTML embed (`'rawHtml'`) -- sometimes does not display in response area, security uncertainty,
     * * Table of contents (`'tableOfContents'`) -- does not display properly in response area, long processing time.
     *
     * You can set this list to include more model elements or clear it to enable the above features.
     *
     * Note, that all or some of these features may become enabled in the future.
     *
     * @default [ 'media', 'rawHtml', 'tableOfContents' ]
     */
    disabledElements?: Array<string>;
}
export type GroupDefinition = {
    /**
     * The unique identifier of the group. It can be referenced while extending existing groups
     * using {@link module:ai/aiassistant~AIAssistantConfig#extraCommandGroups}.
     */
    groupId: string;
    /**
     * The human-readable label of the group.
     */
    groupLabel?: string;
    /**
     * The array of command definitions that belong to the group.
     */
    commands: Array<CommandDefinition>;
};
export type CommandDefinition = {
    /**
     * The unique identifier of the command. It can be referenced while removing commands. See
     * {@link module:ai/aiassistant~AIAssistantConfig#removeCommands} to learn more.
     */
    id: string;
    /**
     * The human-readable label of the command.
     */
    label: string;
    /**
     * The instruction that will be passed to the AI model.
     *
     * It is wrapped in a "full prompt template" for better results.
     */
    prompt: string;
};
/**
 * OpenAI request parameters that will influence how the response is generated.
 *
 * See OpenAI API reference to learn more.
 */
export type RequestParameters = {
    model?: string;
    max_tokens?: number;
    temperature?: number;
    top_p?: number;
    user?: string;
};
