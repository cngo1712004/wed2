/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
import { type default as AIConnector } from '../aiconnector';
import type { default as AIFormView } from './form/aiformview';
declare const AIAssistantController_base: {
    new (): import("ckeditor5/src/utils").Observable;
    prototype: import("ckeditor5/src/utils").Observable;
};
/**
 * Controller for the AI assistant.
 *
 * It takes a AI balloon view, listens to events fired by that view and based on them performs actions on an AI handler.
 * This controller is also responsible for streaming the AI response for the UI.
 */
export default class AIAssistantController extends AIAssistantController_base {
    /**
     * An instance of the {@link module:ai/aiconnector~AIConnector}.
     */
    readonly connector: AIConnector;
    /**
     * An instance of the {@link module:ai/ui/aiformview~AIFormView}.
     */
    readonly view: AIFormView;
    /**
     * The previous value of the user prompt. It is kept to handle the try again event.
     *
     * @observable
     */
    previousPrompt?: string;
    /**
     * The previous value of the context for the AI request. It is kept to handle the try again event.
     *
     * Initially it is the selected HTML content from the editor. Subsequently,
     * the context is replaced by each response from AI.
     *
     * @observable
     */
    previousContext?: string;
    /**
     * Flag that indicates if the processing is in progress.
     *
     * @observable
     */
    isProcessing: boolean;
    /**
     * @param connector AI connector instance.
     * @param view AI form view.
     * @param htmlContent The selected HTML content on which the AI should base.
     * @param prompt The initial prompt that causes the processing to start.
     */
    constructor(connector: AIConnector, view: AIFormView, htmlContent: string, prompt?: string);
    /**
     * Destroys `AIAssistantController` instance.
     */
    destroy(): void;
}
export {};
